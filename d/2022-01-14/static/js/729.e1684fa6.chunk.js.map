{"version":3,"file":"static/js/729.e1684fa6.chunk.js","mappings":"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","sources":["network/peerjsUtils.ts","network/peerjsRoom.ts","network/trackUtils.ts","../../node_modules/peerjs/dist|sync"],"sourcesContent":["import Peer from \"peerjs\";\n\nimport { ROOM_ID_PREFIX_LEN } from \"./common\";\nimport { hasObjectProp, hasStringProp } from \"../utils/types\";\n\nexport const isValidPeerId = (\n  roomId: string,\n  peerId: unknown\n): peerId is string =>\n  typeof peerId === \"string\" &&\n  peerId.startsWith(`${roomId.slice(0, ROOM_ID_PREFIX_LEN)} `);\n\nexport const generatePeerId = (roomId: string, peerIndex: number) =>\n  `${roomId.slice(0, ROOM_ID_PREFIX_LEN)} ${peerIndex}`;\n\nexport const getPeerIndexFromPeerId = (peerId: string) =>\n  Number(peerId.split(\" \")[1]);\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Peer.DataConnection;\n    createdAt: number;\n    connected?: boolean;\n    userId?: string;\n    acceptingMediaTypes: string[];\n    remoteMediaTypes: Record<string, string>; // key = mid\n  };\n  const map = new Map<string, Value>();\n\n  const setAcceptingMediaTypes = (\n    conn: Peer.DataConnection,\n    mediaTypes: string[]\n  ) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.acceptingMediaTypes = mediaTypes;\n    }\n  };\n\n  const getAcceptingMediaTypes = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (!value) return [];\n    return value.acceptingMediaTypes;\n  };\n\n  const addConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    map.set(conn.peer, {\n      conn,\n      createdAt: Date.now(),\n      acceptingMediaTypes: [],\n      remoteMediaTypes: {},\n    });\n    if (value) {\n      value.conn.close();\n    }\n  };\n\n  const markConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      value.connected = true;\n    }\n  };\n\n  const isConnected = (value?: Value) =>\n    !!(value && value.connected && value.conn.open);\n\n  const isConnectedConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      return isConnected(value);\n    }\n    return false;\n  };\n\n  const setUserId = (conn: Peer.DataConnection, userId: string) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.userId = userId;\n    }\n  };\n\n  const getUserId = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return value && value.userId;\n  };\n\n  const getConn = (peerId: string) => {\n    const value = map.get(peerId);\n    if (!value) return null;\n    return value.conn;\n  };\n\n  const delConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n      return true;\n    }\n    return false;\n  };\n\n  const getConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => isConnected(map.get(k)));\n\n  const getNotConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => !isConnected(map.get(k)));\n\n  const forEachConnectedConns = (\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (isConnected(value)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (isConnected(value) && value.acceptingMediaTypes.includes(mediaType)) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const clearAll = () => {\n    if (map.size) {\n      console.log(\n        \"connectionMap garbage:\",\n        [...map.entries()].map(([k, v]) => ({\n          id: k,\n          createdAt: v.createdAt,\n          connected: v.connected,\n          open: v.conn.open,\n          userId: v.userId,\n        }))\n      );\n    }\n    map.clear();\n  };\n\n  const getRemoteMediaType = (conn: Peer.DataConnection, mid: string) => {\n    const value = map.get(conn.peer);\n    if (!value) return null;\n    return value.remoteMediaTypes[mid] || null;\n  };\n\n  const registerRemoteMediaTypeFromSDP = (\n    conn: Peer.DataConnection,\n    msid2mediaType: Record<string, unknown>,\n    sdpLines: string\n  ) => {\n    const value = map.get(conn.peer);\n    if (!value) return;\n    const lines = sdpLines.split(/[\\r\\n]+/);\n    let mid: string;\n    lines.forEach((line) => {\n      if (line.startsWith(\"a=mid:\")) {\n        mid = line.slice(\"a=mid:\".length);\n      } else if (line.startsWith(\"a=msid:\")) {\n        const arr = line.slice(\"a=msid:\".length).split(\" \");\n        arr.forEach((msid) => {\n          const mediaType = msid2mediaType[msid];\n          if (typeof mediaType === \"string\") {\n            value.remoteMediaTypes[mid] = mediaType;\n          }\n        });\n      }\n    });\n  };\n\n  const registerRemoteMediaType = (\n    conn: Peer.DataConnection,\n    sdp: Record<string, unknown>\n  ) => {\n    if (!hasObjectProp(sdp, \"msid2mediaType\")) return;\n    if (hasObjectProp(sdp, \"offer\") && hasStringProp(sdp.offer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.offer.sdp);\n    }\n    if (hasObjectProp(sdp, \"answer\") && hasStringProp(sdp.answer, \"sdp\")) {\n      registerRemoteMediaTypeFromSDP(conn, sdp.msid2mediaType, sdp.answer.sdp);\n    }\n  };\n\n  return {\n    setAcceptingMediaTypes,\n    getAcceptingMediaTypes,\n    addConn,\n    markConnected,\n    isConnectedConn,\n    setUserId,\n    getUserId,\n    getConn,\n    delConn,\n    getConnectedPeerIds,\n    getNotConnectedPeerIds,\n    forEachConnectedConns,\n    forEachConnsAcceptingMedia,\n    clearAll,\n    getRemoteMediaType,\n    registerRemoteMediaType,\n  };\n};\n","import Peer from \"peerjs\";\n\nimport { sleep } from \"../utils/sleep\";\nimport { importCryptoKey, encryptString, decryptString } from \"../utils/crypto\";\nimport { getPeerJsConfigFromUrl } from \"../utils/url\";\nimport { isObject, hasObjectProp } from \"../utils/types\";\nimport { ROOM_ID_PREFIX_LEN, PeerInfo, CreateRoom } from \"./common\";\nimport {\n  isValidPeerId,\n  generatePeerId,\n  getPeerIndexFromPeerId,\n  createConnectionMap,\n} from \"./peerjsUtils\";\nimport { setupTrackStopOnLongMute } from \"./trackUtils\";\n\nconst MIN_PEER_INDEX = 1;\nconst MAX_PEER_INDEX = 50;\n\nexport const createRoom: CreateRoom = async (\n  roomId,\n  userId,\n  updateNetworkStatus,\n  notifyNewPeer,\n  receiveData,\n  receiveTrack\n) => {\n  let disposed = false;\n  const connMap = createConnectionMap();\n  // if (process.env.NODE_ENV !== \"production\") {\n  (window as any).myConnMap = connMap;\n  // }\n  let mediaTypes: string[] = [];\n\n  const cryptoKey = await importCryptoKey(roomId.slice(ROOM_ID_PREFIX_LEN));\n\n  let myPeer: Peer | null = null;\n  // if (process.env.NODE_ENV !== \"production\") {\n  (window as any).getMyPeer = () => myPeer;\n  // }\n  const initMyPeer = (index = MIN_PEER_INDEX) => {\n    if (disposed) return;\n    connMap.clearAll();\n    updateNetworkStatus({ type: \"INITIALIZING_PEER\", peerIndex: index });\n    const id = generatePeerId(roomId, index);\n    const peer = new Peer(id, getPeerJsConfigFromUrl());\n    peer.on(\"open\", () => {\n      myPeer = peer;\n      console.log(\"myPeer initialized\", index);\n      setTimeout(connectSeedPeers, 10);\n    });\n    peer.on(\"error\", (err) => {\n      if (err.type === \"unavailable-id\") {\n        peer.destroy();\n        if (index === MAX_PEER_INDEX) {\n          throw new Error(\"max peer index reached\");\n        }\n        setTimeout(() => {\n          initMyPeer(index + 1);\n        }, 100);\n      } else if (err.type === \"peer-unavailable\") {\n        // ignore\n      } else if (err.type === \"disconnected\") {\n        console.log(\"initMyPeer disconnected error\", index, err);\n      } else if (err.type === \"network\") {\n        console.log(\"initMyPeer network error\", index, err);\n        setTimeout(() => {\n          if (!peer.destroyed && myPeer === null) {\n            peer.destroy();\n            initMyPeer();\n          }\n        }, 10 * 1000);\n      } else if (err.type === \"server-error\") {\n        console.log(\"initMyPeer server error\", index, err);\n        updateNetworkStatus({ type: \"SERVER_ERROR\" });\n      } else {\n        console.error(\"initMyPeer unknown error\", index, err.type, err);\n        updateNetworkStatus({ type: \"UNKNOWN_ERROR\", err });\n      }\n    });\n    peer.on(\"connection\", (conn) => {\n      if (peer !== myPeer) {\n        console.log(\"new connection to old peer, closing\");\n        conn.close();\n        return;\n      }\n      if (peer.id === conn.peer) {\n        console.log(\"new connection from self, closing\");\n        conn.close();\n        return;\n      }\n      updateNetworkStatus({\n        type: \"NEW_CONNECTION\",\n        peerIndex: getPeerIndexFromPeerId(conn.peer),\n      });\n      initConnection(conn);\n    });\n    peer.on(\"disconnected\", () => {\n      console.log(\"initMyPeer disconnected\", index);\n      setTimeout(() => {\n        if (!peer.destroyed && peer === myPeer) {\n          updateNetworkStatus({ type: \"RECONNECTING\", peerIndex: index });\n          peer.reconnect();\n          setTimeout(() => {\n            if (peer.disconnected && !peer.destroyed && peer === myPeer) {\n              console.log(\"reconnect failed, re-initializing\");\n              reInitMyPeer();\n            }\n          }, 60 * 1000);\n        }\n      }, 5 * 1000);\n    });\n  };\n  initMyPeer();\n\n  const showConnectedStatus = () => {\n    if (disposed) return;\n    const peerIndexList = connMap\n      .getConnectedPeerIds()\n      .map(getPeerIndexFromPeerId);\n    updateNetworkStatus({ type: \"CONNECTED_PEERS\", peerIndexList });\n    console.log(\n      \"myPeer index:\",\n      myPeer?.id && getPeerIndexFromPeerId(myPeer.id),\n      \", connecting:\",\n      connMap.getNotConnectedPeerIds().map(getPeerIndexFromPeerId)\n    );\n  };\n\n  const connectSeedPeers = () => {\n    if (!myPeer) return;\n    const myPeerIndex = getPeerIndexFromPeerId(myPeer.id);\n    if (myPeerIndex > MIN_PEER_INDEX) {\n      updateNetworkStatus({ type: \"CONNECTING_SEED_PEERS\" });\n      for (let i = MIN_PEER_INDEX; i < myPeerIndex; i += 1) {\n        const seedId = generatePeerId(roomId, i);\n        connectPeer(seedId);\n      }\n    }\n  };\n\n  const connectPeer = (id: string) => {\n    if (disposed || !myPeer) return;\n    if (myPeer.id === id || myPeer.disconnected) return;\n    if (connMap.getConn(id)) return;\n    console.log(\"connectPeer\", id);\n    const conn = myPeer.connect(id);\n    initConnection(conn);\n  };\n\n  const broadcastData = (data: unknown) => {\n    if (disposed) return;\n    const peers = connMap.getConnectedPeerIds();\n    connMap.forEachConnectedConns((conn) => {\n      sendPayload(conn, { userId, data, peers, mediaTypes });\n    });\n  };\n\n  const sendData = (data: unknown, peerIndex: number) => {\n    if (disposed) return;\n    const conn = connMap.getConn(generatePeerId(roomId, peerIndex));\n    if (!conn) return;\n    const peers = connMap.getConnectedPeerIds();\n    sendPayload(conn, { userId, data, peers, mediaTypes });\n  };\n\n  const sendSDP = (\n    conn: Peer.DataConnection,\n    sdp: { offer: unknown } | { answer: unknown }\n  ) => {\n    const msid2mediaType = getMsid2MediaType();\n    sendPayload(conn, { SDP: { ...sdp, msid2mediaType } });\n  };\n\n  const handlePayloadSDP = async (conn: Peer.DataConnection, sdp: unknown) => {\n    if (!isObject(sdp)) return;\n    connMap.registerRemoteMediaType(conn, sdp);\n    if (hasObjectProp(sdp, \"offer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(\n          sdp.offer as unknown as RTCSessionDescriptionInit // FIXME\n        );\n        syncAllTracks(conn);\n        const answer = await conn.peerConnection.createAnswer();\n        await conn.peerConnection.setLocalDescription(answer);\n        sendSDP(conn, { answer });\n      } catch (e) {\n        console.info(\"handleSDP offer failed\", e);\n      }\n    } else if (hasObjectProp(sdp, \"answer\")) {\n      try {\n        await conn.peerConnection.setRemoteDescription(\n          sdp.answer as unknown as RTCSessionDescriptionInit // FIXME\n        );\n      } catch (e) {\n        console.info(\"handleSDP answer failed\", e);\n        await sleep(Math.random() * 30 * 1000);\n        removeAllTracks(conn);\n        syncAllTracks(conn);\n      }\n    } else {\n      console.warn(\"unknown SDP\", sdp);\n    }\n  };\n\n  const handlePayloadUserId = (\n    conn: Peer.DataConnection,\n    payloadUserId: unknown\n  ) => {\n    if (typeof payloadUserId === \"string\") {\n      connMap.setUserId(conn, payloadUserId);\n    }\n  };\n\n  const handlePayloadMediaTypes = async (\n    conn: Peer.DataConnection,\n    payloadMediaTypes: unknown\n  ) => {\n    if (\n      Array.isArray(payloadMediaTypes) &&\n      payloadMediaTypes.every((x) => typeof x === \"string\")\n    ) {\n      connMap.setAcceptingMediaTypes(conn, payloadMediaTypes as string[]);\n      await sleep(5000);\n      syncAllTracks(conn);\n    }\n  };\n\n  const handlePayloadPeers = (peers: unknown) => {\n    if (Array.isArray(peers)) {\n      peers.forEach((peer) => {\n        if (\n          isValidPeerId(roomId, peer) &&\n          myPeer &&\n          getPeerIndexFromPeerId(peer) < getPeerIndexFromPeerId(myPeer.id)\n        ) {\n          connectPeer(peer);\n        }\n      });\n    }\n  };\n\n  const handlePayloadData = (conn: Peer.DataConnection, data: unknown) => {\n    const connUserId = connMap.getUserId(conn);\n    if (connUserId) {\n      const info: PeerInfo = {\n        userId: connUserId,\n        peerIndex: getPeerIndexFromPeerId(conn.peer),\n        mediaTypes: connMap.getAcceptingMediaTypes(conn),\n      };\n      try {\n        receiveData(data, info);\n      } catch (e) {\n        console.warn(\"receiveData\", e);\n      }\n    }\n  };\n\n  const handlePayload = async (\n    conn: Peer.DataConnection,\n    encrypted: ArrayBuffer\n  ) => {\n    if (disposed) return;\n    try {\n      const payload = JSON.parse(await decryptString(encrypted, cryptoKey));\n      // console.log(\"decrypted payload\", conn.peer, payload);\n      if (!isObject(payload)) return;\n\n      handlePayloadSDP(conn, (payload as { SDP?: unknown }).SDP);\n      handlePayloadUserId(conn, (payload as { userId?: unknown }).userId);\n      handlePayloadMediaTypes(\n        conn,\n        (payload as { mediaTypes?: unknown }).mediaTypes\n      );\n      handlePayloadPeers((payload as { peers?: unknown }).peers);\n      handlePayloadData(conn, (payload as { data?: unknown }).data);\n    } catch (e) {\n      console.info(\"Error in handlePayload\", e, encrypted);\n    }\n  };\n\n  const sendPayload = async (conn: Peer.DataConnection, payload: unknown) => {\n    try {\n      const encrypted = await encryptString(JSON.stringify(payload), cryptoKey);\n      conn.send(encrypted);\n    } catch (e) {\n      console.error(\"sendPayload\", e);\n    }\n  };\n\n  const initConnection = (conn: Peer.DataConnection) => {\n    const peerIndex = getPeerIndexFromPeerId(conn.peer);\n    connMap.addConn(conn);\n    let timer: NodeJS.Timeout;\n    const scheduleClose = (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        console.log(\n          \"Connection inactive for\",\n          wait,\n          \"msec:\",\n          peerIndex,\n          conn.open\n        );\n        conn.close();\n        connMap.delConn(conn);\n        reconnectPeer(conn.peer);\n      }, wait);\n    };\n    const initiatingConnection =\n      myPeer && peerIndex < getPeerIndexFromPeerId(myPeer.id);\n    scheduleClose(\n      initiatingConnection\n        ? 20 * 1000 // 20sec\n        : 50 * 1000 // 50sec\n    );\n    conn.on(\"open\", () => {\n      scheduleClose(30 * 1000); // 30sec\n      connMap.markConnected(conn);\n      console.log(\"dataConnection open\", peerIndex);\n      showConnectedStatus();\n      notifyNewPeer(peerIndex);\n    });\n    conn.on(\"data\", (buf: ArrayBuffer) => {\n      scheduleClose(3 * 60 * 1000); // 3min\n      connMap.markConnected(conn);\n      handlePayload(conn, buf);\n    });\n    conn.peerConnection.addEventListener(\"icegatheringstatechange\", () => {\n      const pc = conn.peerConnection;\n      if (pc.iceGatheringState === \"complete\") {\n        pc.onicecandidate = () => undefined;\n      }\n    });\n    let negotiationScheduled = false;\n    conn.peerConnection.addEventListener(\"negotiationneeded\", async () => {\n      if (negotiationScheduled) return;\n      negotiationScheduled = true;\n      await sleep(5000);\n      negotiationScheduled = false;\n      if (!connMap.isConnectedConn(conn)) return;\n      if (!conn.peerConnection) return;\n      if (conn.peerConnection.signalingState === \"closed\") return;\n      const offer = await conn.peerConnection.createOffer();\n      await conn.peerConnection.setLocalDescription(offer);\n      sendSDP(conn, { offer });\n    });\n    conn.peerConnection.addEventListener(\"track\", (event: RTCTrackEvent) => {\n      if (!connMap.isConnectedConn(conn)) {\n        console.warn(\"received track from non-connected peer, ignoring\");\n        return;\n      }\n      const { mid } = event.transceiver;\n      const mType = mid && connMap.getRemoteMediaType(conn, mid);\n      if (!mType) {\n        console.warn(\"failed to find media type from mid\");\n        return;\n      }\n      const connUserId = connMap.getUserId(conn);\n      if (connUserId) {\n        const info: PeerInfo = {\n          userId: connUserId,\n          peerIndex,\n          mediaTypes: connMap.getAcceptingMediaTypes(conn),\n        };\n        receiveTrack(\n          mType,\n          setupTrackStopOnLongMute(event.track, conn.peerConnection),\n          info\n        );\n      }\n    });\n    conn.on(\"close\", () => {\n      clearTimeout(timer);\n      connMap.delConn(conn);\n      updateNetworkStatus({ type: \"CONNECTION_CLOSED\", peerIndex });\n      showConnectedStatus();\n      if (\n        connMap.getNotConnectedPeerIds().length >=\n        connMap.getConnectedPeerIds().length\n      ) {\n        reInitMyPeer();\n      } else {\n        reconnectPeer(conn.peer);\n      }\n    });\n  };\n\n  const reconnectPeer = (id: string) => {\n    if (!myPeer) return;\n    if (getPeerIndexFromPeerId(id) < getPeerIndexFromPeerId(myPeer.id)) {\n      connectPeer(id);\n    }\n  };\n\n  const reInitMyPeer = () => {\n    if (!myPeer || myPeer.disconnected) return; // should already be handled\n    myPeer.destroy();\n    myPeer = null;\n    initMyPeer();\n  };\n\n  const acceptMediaTypes = (mTypes: string[]) => {\n    if (disposed) return;\n    if (mTypes.length !== mediaTypes.length) {\n      connMap.forEachConnectedConns((conn) => {\n        const connUserId = connMap.getUserId(conn);\n        if (connUserId) {\n          const info: PeerInfo = {\n            userId: connUserId,\n            peerIndex: getPeerIndexFromPeerId(conn.peer),\n            mediaTypes: connMap.getAcceptingMediaTypes(conn),\n          };\n          const transceivers = conn.peerConnection.getTransceivers();\n          conn.peerConnection.getReceivers().forEach((receiver) => {\n            const transceiver = transceivers.find(\n              (t) => t.receiver === receiver\n            );\n            const mid = transceiver?.mid;\n            const mType = mid && connMap.getRemoteMediaType(conn, mid);\n            if (!mType) {\n              console.warn(\"failed to find media type from mid\");\n              return;\n            }\n            if (\n              receiver.track.readyState === \"live\" &&\n              !mediaTypes.includes(mType) &&\n              mTypes.includes(mType)\n            ) {\n              receiveTrack(\n                mType,\n                setupTrackStopOnLongMute(receiver.track, conn.peerConnection),\n                info\n              );\n            }\n          });\n        }\n      });\n    }\n    mediaTypes = mTypes;\n    broadcastData(null);\n  };\n\n  const mediaTypeMap = new Map<\n    string,\n    {\n      stream: MediaStream;\n      track: MediaStreamTrack;\n    }\n  >();\n\n  const getMsid2MediaType = () => {\n    const msid2mediaType: Record<string, string> = {};\n    mediaTypeMap.forEach(({ stream }, mType) => {\n      msid2mediaType[stream.id] = mType;\n    });\n    return msid2mediaType;\n  };\n\n  const addTrack = (mediaType: string, track: MediaStreamTrack) => {\n    if (disposed) return;\n    if (mediaTypeMap.has(mediaType)) {\n      throw new Error(`track is already added for ${mediaType}`);\n    }\n    const stream = new MediaStream([track]);\n    mediaTypeMap.set(mediaType, { stream, track });\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      try {\n        conn.peerConnection.addTrack(track, stream);\n      } catch (e) {\n        if ((e as any).name === \"InvalidAccessError\") {\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n    });\n  };\n\n  const removeTrack = (mediaType: string) => {\n    if (disposed) return;\n    const item = mediaTypeMap.get(mediaType);\n    if (!item) {\n      console.log(\"track is already removed for\", mediaType);\n      return;\n    }\n    const { track } = item;\n    mediaTypeMap.delete(mediaType);\n    connMap.forEachConnsAcceptingMedia(mediaType, (conn) => {\n      const senders = conn.peerConnection?.getSenders() ?? [];\n      const sender = senders.find((s) => s.track === track);\n      if (sender && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const syncAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection?.getSenders() ?? [];\n    const acceptingMediaTypes = connMap.getAcceptingMediaTypes(conn);\n    acceptingMediaTypes.forEach((mType) => {\n      const item = mediaTypeMap.get(mType);\n      if (!item) return;\n      const { stream, track } = item;\n      if (senders.every((sender) => sender.track !== track)) {\n        conn.peerConnection.addTrack(track, stream);\n      }\n    });\n    senders.forEach((sender) => {\n      if (!sender.track) return;\n      const isEffective = acceptingMediaTypes.some(\n        (mType) => mediaTypeMap.get(mType)?.track === sender.track\n      );\n      if (!isEffective && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n    if (senders.some((sender) => sender.track && !sender.transport)) {\n      conn.peerConnection.dispatchEvent(new Event(\"negotiationneeded\"));\n    }\n  };\n\n  const removeAllTracks = (conn: Peer.DataConnection) => {\n    const senders = conn.peerConnection?.getSenders() ?? [];\n    senders.forEach((sender) => {\n      if (sender.track && conn.peerConnection.signalingState !== \"closed\") {\n        conn.peerConnection.removeTrack(sender);\n      }\n    });\n  };\n\n  const dispose = () => {\n    disposed = true;\n    if (myPeer) {\n      myPeer.destroy();\n      myPeer = null;\n    }\n  };\n\n  return {\n    broadcastData,\n    sendData,\n    acceptMediaTypes,\n    addTrack,\n    removeTrack,\n    dispose,\n  };\n};\n","const setupMap = new WeakMap<MediaStreamTrack, boolean>();\n\n// XXX we don't get \"ended\" event with removeTrack,\n// so a workaround is onmute and transceiver.currentDirection\nexport const setupTrackStopOnLongMute = (\n  track: MediaStreamTrack,\n  pc: RTCPeerConnection\n) => {\n  if (setupMap.has(track)) {\n    return track;\n  }\n  setupMap.set(track, true);\n  const onmute = (timeout = 1000) => {\n    if (track.readyState === \"ended\") return;\n    const transceiver = pc\n      .getTransceivers()\n      .find((t) => t.receiver.track === track);\n    if (\n      transceiver &&\n      (transceiver.currentDirection === \"inactive\" ||\n        transceiver.currentDirection === \"sendonly\")\n    ) {\n      track.stop();\n      // XXX we need to manually dispatch ended event, why?\n      track.dispatchEvent(new Event(\"ended\"));\n    } else if (timeout < 64000) {\n      setTimeout(() => {\n        onmute(timeout * 2);\n      }, timeout);\n    }\n  };\n  track.addEventListener(\"mute\", () => onmute());\n  return track;\n};\n\nexport const loopbackPeerConnection = (\n  track: MediaStreamTrack\n): Promise<MediaStreamTrack> =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    try {\n      const pcIn = new RTCPeerConnection();\n      const pcOut = new RTCPeerConnection();\n      pcIn.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcOut.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"icecandidate\", ({ candidate }) => {\n        if (candidate) {\n          pcIn.addIceCandidate(candidate);\n        }\n      });\n      pcOut.addEventListener(\"track\", (event) => {\n        resolve(event.track);\n      });\n      track.addEventListener(\"ended\", () => {\n        pcIn.close();\n        pcOut.close();\n      });\n      pcIn.addTrack(track);\n      const offer = await pcIn.createOffer();\n      await pcIn.setLocalDescription(offer);\n      await pcOut.setRemoteDescription(offer);\n      const answer = await pcOut.createAnswer();\n      await pcOut.setLocalDescription(answer);\n      await pcIn.setRemoteDescription(answer);\n    } catch (e) {\n      reject(e);\n    }\n  });\n\nexport const videoTrackToImageConverter = async (track: MediaStreamTrack) => {\n  if (track.kind !== \"video\") {\n    throw new Error(\"track kind is not video\");\n  }\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const imageCapture = new ImageCapture(track);\n  const getImage = async () => {\n    try {\n      const bitmap = await imageCapture.grabFrame();\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      ctx.drawImage(bitmap, 0, 0);\n      return canvas.toDataURL(\"image/jpeg\");\n    } catch (e) {\n      console.log(\"failed to grab frame from viedeo track\", e);\n      return null;\n    }\n  };\n  return { getImage };\n};\n\nconst createImage = (src: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = src;\n  });\n\nexport const imageToVideoTrackConverter = () => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const canvasStream = (canvas as any).captureStream() as MediaStream;\n  const [videoTrack] = canvasStream.getVideoTracks();\n  const setImage = async (dataURL: string) => {\n    const img = await createImage(dataURL);\n    canvas.width = img.width;\n    canvas.height = img.height;\n    ctx.drawImage(img, 0, 0);\n  };\n  return { videoTrack, setImage };\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 98983;\nmodule.exports = webpackEmptyContext;"],"names":["generatePeerId","roomId","peerIndex","slice","ROOM_ID_PREFIX_LEN","getPeerIndexFromPeerId","peerId","Number","split","createRoom","async","userId","updateNetworkStatus","notifyNewPeer","receiveData","receiveTrack","disposed","connMap","map","Map","isConnected","value","connected","conn","open","registerRemoteMediaTypeFromSDP","msid2mediaType","sdpLines","get","peer","mid","forEach","line","startsWith","length","msid","mediaType","remoteMediaTypes","setAcceptingMediaTypes","mediaTypes","acceptingMediaTypes","getAcceptingMediaTypes","addConn","set","createdAt","Date","now","close","markConnected","isConnectedConn","setUserId","getUserId","getConn","delConn","delete","getConnectedPeerIds","Array","from","keys","filter","k","getNotConnectedPeerIds","forEachConnectedConns","callback","values","forEachConnsAcceptingMedia","includes","clearAll","size","console","log","entries","v","id","clear","getRemoteMediaType","registerRemoteMediaType","sdp","hasObjectProp","hasStringProp","offer","answer","createConnectionMap","window","myConnMap","cryptoKey","importCryptoKey","myPeer","getMyPeer","initMyPeer","index","type","Peer","getPeerJsConfigFromUrl","on","setTimeout","connectSeedPeers","err","destroy","Error","destroyed","error","initConnection","reconnect","disconnected","reInitMyPeer","showConnectedStatus","peerIndexList","myPeerIndex","i","seedId","connectPeer","connect","broadcastData","data","peers","sendPayload","sendSDP","getMsid2MediaType","SDP","handlePayloadPeers","isArray","isValidPeerId","handlePayload","encrypted","payload","JSON","parse","decryptString","isObject","peerConnection","setRemoteDescription","syncAllTracks","createAnswer","setLocalDescription","e","info","sleep","Math","random","removeAllTracks","warn","handlePayloadSDP","payloadUserId","handlePayloadUserId","payloadMediaTypes","every","x","handlePayloadMediaTypes","connUserId","handlePayloadData","encryptString","stringify","send","timer","scheduleClose","wait","clearTimeout","reconnectPeer","initiatingConnection","buf","addEventListener","pc","iceGatheringState","onicecandidate","negotiationScheduled","signalingState","createOffer","event","transceiver","mType","setupTrackStopOnLongMute","track","mediaTypeMap","stream","senders","getSenders","item","sender","addTrack","some","removeTrack","transport","dispatchEvent","Event","sendData","acceptMediaTypes","mTypes","transceivers","getTransceivers","getReceivers","receiver","find","t","readyState","has","MediaStream","name","s","dispose","setupMap","WeakMap","onmute","timeout","currentDirection","stop","loopbackPeerConnection","Promise","resolve","reject","pcIn","RTCPeerConnection","pcOut","candidate","addIceCandidate","videoTrackToImageConverter","kind","canvas","document","createElement","ctx","getContext","imageCapture","ImageCapture","getImage","bitmap","grabFrame","width","height","drawImage","toDataURL","imageToVideoTrackConverter","canvasStream","captureStream","videoTrack","getVideoTracks","setImage","img","src","dataURL","Image","onload","onerror","webpackEmptyContext","req","code","module","exports"],"sourceRoot":""}