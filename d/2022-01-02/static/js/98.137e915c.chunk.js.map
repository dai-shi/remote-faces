{"version":3,"file":"static/js/98.137e915c.chunk.js","mappings":"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","sources":["hooks/useMediaShare.ts","media/screen.ts","hooks/useNicknameMap.ts","components/MediaShare.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { useSnapshot } from \"valtio\";\n\nimport { getScreenStream } from \"../media/screen\";\nimport { getVideoStream } from \"../media/video\";\nimport { getRoomState } from \"../states/roomMap\";\n\nexport const useMediaShare = (\n  roomId: string,\n  userId: string,\n  mediaId: { video: string } | \"SCREEN\" | null,\n  close: () => void,\n  uniqueShareId?: string\n) => {\n  const videoType = `${uniqueShareId || \"mediaShare\"}Video`;\n  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);\n  const [videoStreamMap, setVideoStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (track.readyState === \"ended\") return;\n    if (videoStreamMap[uid]?.getTracks().includes(track)) return;\n    setVideoStreamMap((prev) => ({\n      ...prev,\n      [uid]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setVideoStreamMap((prev) => ({\n        ...prev,\n        [uid]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  };\n\n  const trackMap = useSnapshot(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    roomState.addMediaType(videoType);\n    return () => {\n      roomState.removeMediaType(videoType);\n    };\n  }, [roomId, userId, videoType]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let cleanup: (() => void) | null | false = null;\n    if (mediaId) {\n      (async () => {\n        let result: { stream: MediaStream; dispose: () => void };\n        if (mediaId === \"SCREEN\") {\n          const resultOrNull = await getScreenStream();\n          if (!resultOrNull) {\n            close();\n            return;\n          }\n          result = resultOrNull;\n        } else {\n          result = await getVideoStream(mediaId.video);\n        }\n        const [track] = result.stream.getVideoTracks();\n        roomState.addTrack(videoType, track);\n        setVideoStream(result.stream);\n        track.addEventListener(\"ended\", () => {\n          if (cleanup) cleanup();\n          cleanup = null;\n        });\n        const dispose = () => {\n          roomState.removeTrack(videoType);\n          result.dispose();\n          setVideoStream(null);\n          close();\n        };\n        if (cleanup === false) {\n          dispose();\n        } else {\n          cleanup = dispose;\n        }\n      })();\n    }\n    return () => {\n      if (cleanup) cleanup();\n      cleanup = false;\n    };\n  }, [roomId, userId, videoType, mediaId, close]);\n\n  return { videoStream, videoStreamMap };\n};\n","export const getScreenStream = async () => {\n  try {\n    const constraints = { video: true };\n    const stream = (await (navigator.mediaDevices as any).getDisplayMedia(\n      constraints\n    )) as MediaStream;\n    const [track] = stream.getVideoTracks();\n    const dispose = () => {\n      track.stop();\n    };\n    return {\n      stream,\n      dispose,\n    };\n  } catch (e) {\n    return null;\n  }\n};\n","import { useEffect, useState } from \"react\";\n\nimport { isObject } from \"../utils/types\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst hasInfoNickname = (x: unknown): x is { info: { nickname: string } } =>\n  isObject(x) &&\n  isObject((x as { info: unknown }).info) &&\n  typeof (x as { info: { nickname: unknown } }).info.nickname === \"string\";\n\ntype NicknameMap = {\n  [userId: string]: string;\n};\n\nexport const useNicknameMap = (roomId: string, userId: string) => {\n  const [nicknameMap, setNicknameMap] = useState<NicknameMap>({});\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const map = roomState.ydoc.getMap(\"faceImages\");\n    const listener = () => {\n      setNicknameMap((prev) => {\n        const copied = { ...prev };\n        let changed = false;\n        map.forEach((data, uid) => {\n          if (uid === userId) return;\n          if (!hasInfoNickname(data)) return;\n          if (!copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          } else if (data.info.nickname !== copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          }\n        });\n        if (changed) {\n          return copied;\n        }\n        return prev;\n      });\n    };\n    map.observe(listener);\n    listener();\n    return () => {\n      map.unobserve(listener);\n    };\n  }, [roomId, userId]);\n\n  return nicknameMap;\n};\n","import { memo, useCallback, useState, useRef, useEffect } from \"react\";\n\nimport \"./MediaShare.css\";\nimport { useMediaShare } from \"../hooks/useMediaShare\";\nimport { useVideoDevices } from \"../hooks/useAvailableDevices\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Video = memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div className=\"MediaShare-card\">\n      <video className=\"MediaShare-video\" ref={videoRef} autoPlay muted />\n      <div className=\"MediaShare-nickname\">{nickname}</div>\n    </div>\n  );\n});\n\nexport const MediaShare = memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n  uniqueId?: string;\n}>(({ roomId, userId, nickname, uniqueId }) => {\n  const videoDevices = useVideoDevices();\n  const [videoDeviceId, setVideoDeviceId] = useState<string>(\"\");\n  const [mediaId, setMediaId] = useState<{ video: string } | \"SCREEN\" | null>(\n    null\n  );\n  const close = useCallback(() => {\n    setMediaId(null);\n  }, []);\n  const { videoStream, videoStreamMap } = useMediaShare(\n    roomId,\n    userId,\n    mediaId,\n    close,\n    uniqueId\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n  const [displayMode, setDisplayMode] = useState<\"grid\" | \"vertical\">(\"grid\");\n  const numOfVideos =\n    (videoStream ? 1 : 0) +\n    Object.values(videoStreamMap).filter((x) => x).length;\n  const sqrtNumOfVideos = Math.ceil(Math.sqrt(numOfVideos));\n  const gridRows = Math.ceil(numOfVideos / sqrtNumOfVideos);\n  const displayStyle =\n    displayMode === \"grid\"\n      ? {\n          gridTemplateColumns: `repeat(${sqrtNumOfVideos}, 1fr)`,\n          gridTemplateRows: `repeat(${gridRows}, ${100 / gridRows}%)`,\n        }\n      : {\n          gridTemplateRows: Array(numOfVideos).fill(\"100%\").join(\" \"),\n        };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [fullscreenMode, setFullscreenMode] = useState(false);\n  const enterFullscreen = async () => {\n    if (containerRef.current) {\n      try {\n        await containerRef.current.requestFullscreen();\n        setFullscreenMode(true);\n        containerRef.current.onfullscreenchange = () => {\n          setFullscreenMode(\n            document.fullscreenElement === containerRef.current\n          );\n        };\n      } catch (e) {\n        // ignored\n      }\n    }\n  };\n  const exitFullscreen = async () => {\n    try {\n      document.exitFullscreen();\n      setFullscreenMode(false);\n    } catch (e) {\n      // ignored\n    }\n  };\n\n  return (\n    <div className=\"MediaShare-container\" ref={containerRef}>\n      <div className=\"MediaShare-toolbar\">\n        {!fullscreenMode && (\n          <button type=\"button\" onClick={enterFullscreen}>\n            Enter Fullscreen\n          </button>\n        )}\n        {fullscreenMode && (\n          <button type=\"button\" onClick={exitFullscreen}>\n            Exit Fullscreen\n          </button>\n        )}\n        <select\n          value={displayMode}\n          onChange={(e) => setDisplayMode(e.target.value as typeof displayMode)}\n        >\n          <option value=\"grid\">Display in Grid</option>\n          <option value=\"vertical\">Display Vertically</option>\n        </select>\n        {mediaId !== null && (\n          <button type=\"button\" onClick={close}>\n            Stop sharing\n          </button>\n        )}\n        {mediaId === null && (\n          <button type=\"button\" onClick={() => setMediaId(\"SCREEN\")}>\n            Start Screen Share\n          </button>\n        )}\n        {mediaId === null && (\n          <>\n            <select\n              value={videoDeviceId}\n              onChange={(e) => setVideoDeviceId(e.target.value)}\n            >\n              <option value=\"\" disabled>\n                Select Camera to Share\n              </option>\n              {videoDevices.map((videoDevice) => (\n                <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n                  {videoDevice.label}\n                </option>\n              ))}\n            </select>\n            {videoDeviceId && (\n              <button\n                type=\"button\"\n                onClick={() => setMediaId({ video: videoDeviceId })}\n              >\n                Start Video Share\n              </button>\n            )}\n          </>\n        )}\n      </div>\n      <div className=\"MediaShare-body\" style={displayStyle}>\n        {videoStream && <Video nickname={nickname} stream={videoStream} />}\n        {Object.keys(videoStreamMap).map((mediaUserId) => {\n          const stream = videoStreamMap[mediaUserId];\n          if (!stream) return null;\n          return (\n            <Video\n              key={mediaUserId}\n              nickname={nicknameMap[mediaUserId] || \"No Name\"}\n              stream={stream}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default MediaShare;\n"],"names":["useMediaShare","roomId","userId","mediaId","close","uniqueShareId","videoType","videoStream","setVideoStream","useState","videoStreamMap","setVideoStreamMap","cleanupFns","useRef","useEffect","current","forEach","fn","trackMap","useSnapshot","getRoomState","Object","entries","uid","track","readyState","getTracks","includes","prev","MediaStream","onended","addEventListener","push","removeEventListener","roomState","addMediaType","removeMediaType","cleanup","result","resultOrNull","async","constraints","video","stream","navigator","mediaDevices","getDisplayMedia","getVideoTracks","dispose","stop","e","getScreenStream","getVideoStream","addTrack","removeTrack","useNicknameMap","nicknameMap","setNicknameMap","map","ydoc","getMap","listener","copied","changed","data","x","isObject","info","nickname","observe","unobserve","Video","memo","videoRef","srcObject","className","ref","autoPlay","muted","MediaShare","uniqueId","videoDevices","useVideoDevices","videoDeviceId","setVideoDeviceId","setMediaId","useCallback","displayMode","setDisplayMode","numOfVideos","values","filter","length","sqrtNumOfVideos","Math","ceil","sqrt","gridRows","displayStyle","gridTemplateColumns","gridTemplateRows","Array","fill","join","containerRef","fullscreenMode","setFullscreenMode","type","onClick","requestFullscreen","onfullscreenchange","document","fullscreenElement","exitFullscreen","value","onChange","target","disabled","videoDevice","deviceId","label","style","keys","mediaUserId"],"sourceRoot":""}