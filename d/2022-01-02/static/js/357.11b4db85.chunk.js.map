{"version":3,"file":"static/js/357.11b4db85.chunk.js","mappings":"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","sources":["hooks/useGoBoard.ts","components/GoBoard.tsx"],"sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport { Color } from \"wgo\";\n\nimport { getRoomState } from \"../states/roomMap\";\n\nexport type PositionData = {\n  size: number;\n  grid: Color[];\n  capCount: { black: number; white: number };\n  turn: Color.B | Color.W;\n};\n\nconst isPositionData = (x: unknown): x is PositionData => {\n  try {\n    const obj = x as PositionData;\n    if (typeof obj.size !== \"number\") return false;\n    if (obj.grid.length !== obj.size * obj.size) return false;\n    if (obj.grid.some((c) => c !== Color.B && c !== Color.W && c !== Color.E)) {\n      return false;\n    }\n    if (\n      typeof obj.capCount.black !== \"number\" ||\n      typeof obj.capCount.white !== \"number\"\n    ) {\n      return false;\n    }\n    if (obj.turn !== Color.B && obj.turn !== Color.W) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport type Action =\n  | {\n      type: \"play\";\n      position: PositionData;\n    }\n  | {\n      type: \"pass\";\n      position: PositionData;\n    }\n  | {\n      type: \"undo\";\n    };\n\nexport const useGoBoard = (\n  roomId: string,\n  userId: string,\n  syncDown: (positions: PositionData[]) => void,\n  uniqueBoardId?: string\n) => {\n  const boardType = `${uniqueBoardId || \"go\"}Board`;\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const list = roomState.ydoc.getArray(boardType);\n    const listener = () => {\n      syncDown(\n        list.toArray().flatMap((item) => {\n          try {\n            const data = JSON.parse(item as string);\n            if (isPositionData(data)) {\n              return [data];\n            }\n          } catch (e) {\n            // ignored\n          }\n          return [];\n        })\n      );\n    };\n    list.observe(listener);\n    listener();\n    return () => {\n      list.unobserve(listener);\n    };\n  }, [roomId, userId, syncDown, boardType]);\n\n  const syncUp = useCallback(\n    (positions: PositionData[]) => {\n      const roomState = getRoomState(roomId, userId);\n      const list = roomState.ydoc.getArray(boardType);\n      if (list.length < positions.length) {\n        list.push(positions.slice(list.length).map((x) => JSON.stringify(x)));\n      } else if (list.length > positions.length) {\n        list.delete(positions.length, list.length - positions.length);\n      }\n    },\n    [roomId, userId, boardType]\n  );\n\n  return { syncUp };\n};\n","import { memo, useMemo, useEffect, useRef, useState } from \"react\";\nimport {\n  Game,\n  Color,\n  SVGBoard,\n  FieldBoardObject,\n  MarkupBoardObject,\n  Position,\n} from \"wgo\";\n\nimport \"./GoBoard.css\";\nimport { useGoBoard, PositionData } from \"../hooks/useGoBoard\";\n\nconst createPosition = (positionData: PositionData) => {\n  const position = new Position(positionData.size);\n  position.grid = positionData.grid;\n  position.capCount = positionData.capCount;\n  position.turn = positionData.turn;\n  return position;\n};\n\nconst createGoBoard = (\n  element: HTMLDivElement,\n  setColor: (c: \"black\" | \"white\") => void,\n  setCapCount: (capCount: { black: number; white: number }) => void,\n  syncUp: (positions: PositionData[]) => void\n) => {\n  const game = new Game(6);\n  const board = new SVGBoard(element, {\n    width: element.clientWidth,\n    height: element.clientHeight,\n    size: 6,\n  });\n  let fieldObjects: FieldBoardObject[] = [];\n  let markerObject: MarkupBoardObject | null | false = null;\n  const updateFieldObjects = () => {\n    fieldObjects = fieldObjects.filter((obj) => {\n      if (\n        game.getStone(obj.x, obj.y) !== (obj.type === \"B\" ? Color.B : Color.W)\n      ) {\n        board.removeObject(obj);\n        return false;\n      }\n      return true;\n    });\n    if (markerObject) {\n      board.removeObject(markerObject);\n    }\n    markerObject = null;\n    for (let x = 0; x < game.position.size; x += 1) {\n      for (let y = 0; y < game.position.size; y += 1) {\n        const c = game.position.get(x, y);\n        if (\n          c &&\n          !fieldObjects.some(\n            (obj) =>\n              obj.x === x &&\n              obj.y === y &&\n              c === (obj.type === \"B\" ? Color.B : Color.W)\n          )\n        ) {\n          const obj = new FieldBoardObject(c === Color.B ? \"B\" : \"W\", x, y);\n          board.addObject(obj);\n          fieldObjects.push(obj);\n          if (markerObject === null) {\n            markerObject = new MarkupBoardObject(\"SQ\", x, y, c);\n            board.addObject(markerObject);\n          } else if (markerObject) {\n            // we don't know what is the last move\n            board.removeObject(markerObject);\n            markerObject = false; // don't put marker this time\n          }\n        }\n      }\n    }\n  };\n  let hoverObject: FieldBoardObject | null = null;\n  const clearHoverObject = () => {\n    if (hoverObject) {\n      board.removeObject(hoverObject);\n      hoverObject = null;\n    }\n  };\n  board.on(\"mousemove\", (_event, pos) => {\n    const isValid = pos && game.isValid(pos.x, pos.y);\n    if (!isValid) {\n      clearHoverObject();\n      return;\n    }\n    if (!hoverObject) {\n      hoverObject = new FieldBoardObject(game.turn === Color.B ? \"B\" : \"W\");\n    } else if (hoverObject.x === pos.x && hoverObject.y === pos.y) {\n      return;\n    } else {\n      board.removeObject(hoverObject);\n    }\n    hoverObject.setPosition(pos.x, pos.y);\n    board.addObject(hoverObject);\n  });\n  board.on(\"mouseout\", clearHoverObject);\n  board.on(\"click\", (_event, { x, y }) => {\n    const isValid = game.isValid(x, y);\n    if (isValid) {\n      clearHoverObject();\n      game.play(x, y);\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      syncUp(game.positionStack);\n    }\n  });\n  setColor(game.turn === Color.B ? \"black\" : \"white\");\n  const syncDown = (positions: PositionData[]) => {\n    if (game.positionStack.length === positions.length) return;\n    while (game.positionStack.length < positions.length) {\n      game.pushPosition(createPosition(positions[game.positionStack.length]));\n    }\n    while (game.positionStack.length > positions.length) {\n      game.popPosition();\n    }\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n    clearHoverObject();\n  };\n  const pass = () => {\n    game.pass();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    syncUp(game.positionStack);\n  };\n  const undo = () => {\n    if (game.popPosition()) {\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      syncUp(game.positionStack);\n    }\n  };\n  const resize = () => {\n    board.setDimensions(element.clientWidth, element.clientHeight);\n  };\n  return { syncDown, pass, undo, resize };\n};\n\nexport const GoBoard = memo<{\n  roomId: string;\n  userId: string;\n  uniqueId?: string;\n}>(({ roomId, userId, uniqueId }) => {\n  const actionsRef = useRef<{\n    syncDown: (positions: PositionData[]) => void;\n    pass: () => void;\n    undo: () => void;\n    resize: () => void;\n  }>();\n  const syncDown = useMemo(() => {\n    const cb = (positions: PositionData[]) => {\n      if (!positions.length) return;\n      if (actionsRef.current) {\n        actionsRef.current.syncDown(positions);\n      } else {\n        setTimeout(() => {\n          cb(positions);\n        }, 1000);\n      }\n    };\n    return cb;\n  }, []);\n  const { syncUp } = useGoBoard(roomId, userId, syncDown, uniqueId);\n  const [color, setColor] = useState<\"black\" | \"white\">(\"black\");\n  const [capCount, setCapCount] = useState<{\n    black: number;\n    white: number;\n  }>({ black: 0, white: 0 });\n  const divRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (divRef.current) {\n      const div = divRef.current;\n      const actions = createGoBoard(div, setColor, setCapCount, syncUp);\n      actionsRef.current = actions;\n      const observer = new MutationObserver(actions.resize);\n      const region = div.parentNode?.parentNode;\n      if (region) {\n        observer.observe(region, {\n          attributes: true,\n          attributeFilter: [\"style\"],\n        });\n      }\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return undefined;\n  }, [syncUp]);\n  const pass = () => {\n    if (actionsRef.current) {\n      actionsRef.current.pass();\n    }\n  };\n  const undo = () => {\n    if (actionsRef.current) {\n      actionsRef.current.undo();\n    }\n  };\n  return (\n    <div className=\"GoBoard-container\">\n      <div className=\"GoBoard-toolbar\">\n        Next Turn: {color === \"black\" ? \"Black\" : \"White\"}\n        <button type=\"button\" onClick={pass}>\n          Pass\n        </button>\n        <button type=\"button\" onClick={undo}>\n          Undo\n        </button>\n        <div>\n          Capture Count: Black {capCount.black}, White {capCount.white}\n        </div>\n      </div>\n      <div className=\"GoBoard-canvas\" ref={divRef} />\n    </div>\n  );\n});\n\nexport default GoBoard;\n"],"names":["useGoBoard","roomId","userId","syncDown","uniqueBoardId","boardType","useEffect","list","getRoomState","ydoc","getArray","listener","toArray","flatMap","item","data","JSON","parse","x","obj","size","grid","length","some","c","Color","capCount","black","white","turn","e","isPositionData","observe","unobserve","syncUp","useCallback","positions","push","slice","map","stringify","delete","createPosition","positionData","position","Position","GoBoard","memo","uniqueId","actionsRef","useRef","useMemo","cb","current","setTimeout","color","setColor","useState","setCapCount","divRef","div","actions","element","game","Game","board","SVGBoard","width","clientWidth","height","clientHeight","fieldObjects","markerObject","updateFieldObjects","filter","getStone","y","type","removeObject","get","FieldBoardObject","addObject","MarkupBoardObject","hoverObject","clearHoverObject","on","_event","pos","isValid","setPosition","play","positionStack","pushPosition","popPosition","pass","undo","resize","setDimensions","createGoBoard","observer","MutationObserver","region","parentNode","attributes","attributeFilter","disconnect","className","onClick","ref"],"sourceRoot":""}