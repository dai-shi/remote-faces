{"version":3,"file":"static/js/378.cfe6d562.chunk.js","mappings":"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","sources":["hooks/useMomentaryChat.ts","components/WysiwygEditor.tsx","components/MomentaryChat.tsx","hooks/useNotification.ts"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useSnapshot } from \"valtio\";\n\nimport { secureRandomId } from \"../utils/crypto\";\nimport { isObject } from \"../utils/types\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst MAX_CHAT_LIST_SIZE = 100;\n\ntype Reply = [string, number];\n\nconst isReply = (x: unknown): x is Reply =>\n  Array.isArray(x) &&\n  x.length === 2 &&\n  typeof x[0] === \"string\" &&\n  typeof x[1] === \"number\";\n\nconst isReplies = (x: unknown): x is Reply[] =>\n  Array.isArray(x) && x.every(isReply);\n\nexport type ChatItem = {\n  nickname: string;\n  messageId: string;\n  createdAt: number; // in millisecond\n  text: string;\n  replies: Reply[];\n};\n\nconst isChatItem = (x: unknown): x is ChatItem =>\n  isObject(x) &&\n  typeof (x as { nickname: unknown }).nickname === \"string\" &&\n  typeof (x as { messageId: unknown }).messageId === \"string\" &&\n  typeof (x as { createdAt: unknown }).createdAt === \"number\" &&\n  typeof (x as { text: unknown }).text === \"string\" &&\n  isReplies((x as { replies: unknown }).replies);\n\nconst compareReply = (a: Reply, b: Reply) => {\n  const countDiff = b[1] - a[1];\n  if (countDiff === 0) {\n    return a[0].length - b[0].length;\n  }\n  return countDiff;\n};\n\nexport const useMomentaryChat = (\n  roomId: string,\n  userId: string,\n  nickname: string,\n  uniqueChatId?: string\n) => {\n  const roomState = getRoomState(roomId, userId);\n  const chatType = `${uniqueChatId || \"momentray\"}Chat`;\n  if (!roomState.extraDataListMap[chatType]) {\n    roomState.extraDataListMap[chatType] = [];\n  }\n  const chatListState = roomState.extraDataListMap[chatType];\n  const chatListSnap = useSnapshot(chatListState);\n  const chatList = chatListSnap.filter(isChatItem);\n\n  const sendChat = useCallback(\n    (text: string) => {\n      const chatItem: ChatItem = {\n        nickname,\n        messageId: secureRandomId(),\n        createdAt: Date.now(),\n        text,\n        replies: [],\n      };\n      chatListState.unshift(chatItem);\n      if (chatListState.length > MAX_CHAT_LIST_SIZE) {\n        chatListState.pop();\n      }\n    },\n    [chatListState, nickname]\n  );\n\n  const replyChat = useCallback(\n    (text: string, inReplyTo: string) => {\n      chatListState.forEach((item) => {\n        if (!isChatItem(item)) return;\n        if (item.messageId === inReplyTo) {\n          const replyMap = new Map(item.replies);\n          replyMap.set(text, (replyMap.get(text) || 0) + 1);\n          const replies = [...replyMap.entries()];\n          replies.sort(compareReply);\n          item.replies = replies;\n        }\n      });\n    },\n    [chatListState]\n  );\n\n  return {\n    chatList,\n    sendChat,\n    replyChat,\n  };\n};\n","// @ts-nocheck XXX ckeditor5 doesn't come with types\n\nimport { memo } from \"react\";\n\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport CustomEditor from \"@daishi/ckeditor5-build-inline-custom\";\n\nimport \"./WysiwygEditor.css\";\n\nconst config = {\n  toolbar: [\n    \"specialCharacters\",\n    \"|\",\n    \"bold\",\n    \"italic\",\n    \"link\",\n    \"blockQuote\",\n    \"|\",\n    \"imageUpload\",\n    \"insertTable\",\n    \"mediaEmbed\",\n    \"|\",\n    \"undo\",\n    \"redo\",\n  ],\n  balloonToolbar: [\n    \"heading\",\n    \"|\",\n    \"bulletedList\",\n    \"numberedList\",\n    \"indent\",\n    \"outdent\",\n  ],\n  link: {\n    addTargetToExternalLinks: true,\n  },\n};\n\nconst initEditor = (editor) => {\n  editor.plugins.get(\"SpecialCharacters\").addItems(\"Emoji\", [\n    { title: \"smiley face\", character: \"😊\" },\n    { title: \"rocket\", character: \"🚀\" },\n    { title: \"wind blowing face\", character: \"🌬️\" },\n    { title: \"floppy disk\", character: \"💾\" },\n    { title: \"heart\", character: \"❤️\" },\n  ]);\n};\n\nexport const WysiwygEditor = memo<{\n  registerClear: (clear: () => void) => void;\n  onChange: (data: string) => void;\n  onMetaEnter: () => void;\n}>(({ registerClear, onChange, onMetaEnter }) => (\n  <CKEditor\n    editor={CustomEditor}\n    config={config}\n    onReady={(editor) => {\n      const onKeydown = (event: KeyboardEvent) => {\n        if (event.metaKey && event.code === \"Enter\") {\n          onMetaEnter();\n        }\n      };\n      editor.sourceElement.addEventListener(\"keydown\", onKeydown);\n      registerClear(() => {\n        editor.setData(\"\");\n      });\n      initEditor(editor);\n    }}\n    onChange={(_event, editor) => {\n      const data = editor.getData();\n      onChange(data);\n    }}\n  />\n));\n","import { memo, useState, useRef, useEffect, useCallback } from \"react\";\nimport DOMPurify from \"dompurify\";\n\nimport \"./MomentaryChat.css\";\nimport { useMomentaryChat, ChatItem } from \"../hooks/useMomentaryChat\";\nimport { EmojiPicker } from \"../utils/emoji\";\nimport { WysiwygEditor } from \"./WysiwygEditor\";\nimport { useNotification } from \"../hooks/useNotification\";\n\nconst MAX_CHAT_TEXT_SIZE = 1 * 1024 * 1024;\n\ntype ChatList = ReturnType<typeof useMomentaryChat>[\"chatList\"];\ntype ReplyChat = ReturnType<typeof useMomentaryChat>[\"replyChat\"];\n\nconst sanitize = (text: string) => ({\n  __html: DOMPurify.sanitize(text, { ADD_ATTR: [\"target\"] }),\n});\n\nconst getChatTime = (item: ChatItem) =>\n  new Date(item.createdAt).toLocaleString().split(\" \")[1].slice(0, -3);\n\nconst MomentaryChatContentPart = memo<{\n  item: ChatItem;\n  replyChat: ReplyChat;\n}>(({ item, replyChat }) => {\n  const [openEmojiPicker, setOpenEmojiPicker] = useState(false);\n  const reply = (text: string) => replyChat(text, item.messageId);\n  return (\n    <li key={item.messageId} className=\"MomentaryChat-listPart\">\n      {openEmojiPicker && (\n        <EmojiPicker\n          onSelect={(e) => {\n            reply(e.native);\n            setOpenEmojiPicker(false);\n          }}\n          style={{ width: \"100%\" }}\n        />\n      )}\n      <div className=\"MomentaryChat-listPart-header\">\n        <div className=\"MomentaryChat-iconButton-container\">\n          <div className=\"MomentaryChat-iconButton\">\n            <button\n              type=\"button\"\n              onClick={() => {\n                setOpenEmojiPicker(!openEmojiPicker);\n              }}\n            >\n              +\n            </button>\n          </div>\n        </div>\n        <span className=\"MomentaryChat-nickname\">\n          {item.nickname || \"No Name\"}\n        </span>\n        <span className=\"MomentaryChat-time\">{getChatTime(item)}</span>\n      </div>\n      <div\n        className=\"MomentaryChat-text ck-content\"\n        dangerouslySetInnerHTML={sanitize(item.text)}\n      />\n      {(item.replies || []).map(([text, count]) => (\n        <button\n          key={text}\n          className=\"MomentaryChat-icon\"\n          type=\"button\"\n          onClick={() => reply(text)}\n        >\n          {text} {count}\n        </button>\n      ))}\n    </li>\n  );\n});\n\nconst MomentaryChatContent = memo<{\n  chatList: ChatList;\n  replyChat: ReplyChat;\n}>(({ chatList, replyChat }) => {\n  const chatListRef = useRef<HTMLUListElement | null>(null);\n  const latestMessageId = chatList[0]?.messageId;\n  useEffect(() => {\n    if (chatListRef.current && latestMessageId) {\n      chatListRef.current.scrollTop = chatListRef.current.scrollHeight;\n    }\n  }, [latestMessageId]);\n\n  return (\n    <ul className=\"MomentaryChat-list\" ref={chatListRef}>\n      {chatList.map((item) => (\n        <MomentaryChatContentPart\n          key={item.messageId}\n          item={item}\n          replyChat={replyChat}\n        />\n      ))}\n    </ul>\n  );\n});\n\nexport const MomentaryChat = memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n  uniqueId?: string;\n}>(({ roomId, userId, nickname, uniqueId }) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const { chatList, sendChat, replyChat } = useMomentaryChat(\n    roomId,\n    userId,\n    nickname,\n    uniqueId\n  );\n\n  const clearRef = useRef<() => void>();\n  const registerClear = (clear: () => void) => {\n    clearRef.current = clear;\n  };\n\n  const [canSend, setCanSend] = useState(false);\n  const textRef = useRef(\"\");\n  const setText = useCallback((t: string) => {\n    textRef.current = t;\n    setCanSend(!!t && t.length <= MAX_CHAT_TEXT_SIZE);\n  }, []);\n  const sendText = useCallback(() => {\n    if (textRef.current && textRef.current.length <= MAX_CHAT_TEXT_SIZE) {\n      sendChat(textRef.current);\n      setText(\"\");\n      if (clearRef.current) {\n        clearRef.current();\n      }\n    }\n  }, [sendChat, setText]);\n\n  const sendNotification = useNotification();\n  const latestChatItem = chatList[0];\n  useEffect(() => {\n    if (\n      latestChatItem &&\n      latestChatItem.createdAt > Date.now() - 10 * 1000 &&\n      new RegExp(`@${nickname}\\\\b`).test(latestChatItem.text)\n    ) {\n      sendNotification(\"You got a new message!\");\n    }\n  }, [nickname, latestChatItem, sendNotification]);\n\n  return (\n    <div className=\"MomentaryChat-container\" ref={containerRef}>\n      <MomentaryChatContent chatList={chatList} replyChat={replyChat} />\n      <div className=\"MomentaryChat-editor\">\n        <WysiwygEditor\n          registerClear={registerClear}\n          onChange={setText}\n          onMetaEnter={sendText}\n        />\n      </div>\n      <div className=\"MomentaryChat-button\">\n        <button type=\"button\" onClick={sendText} disabled={!canSend}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default MomentaryChat;\n","import { useEffect, useCallback, useRef } from \"react\";\n\nexport const useNotification = () => {\n  const notificationRef = useRef<Notification>();\n  const sendNotification = useCallback((mesg: string) => {\n    if (Notification.permission === \"granted\") {\n      if (notificationRef.current) {\n        notificationRef.current.close();\n      }\n      notificationRef.current = new Notification(mesg);\n    }\n  }, []);\n  useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission();\n    }\n  }, []);\n  return sendNotification;\n};\n"],"names":["isReply","x","Array","isArray","length","isChatItem","isObject","nickname","messageId","createdAt","text","every","isReplies","replies","compareReply","a","b","countDiff","config","toolbar","balloonToolbar","link","addTargetToExternalLinks","WysiwygEditor","memo","registerClear","onChange","onMetaEnter","CKEditor","editor","CustomEditor","onReady","sourceElement","addEventListener","event","metaKey","code","setData","plugins","get","addItems","title","character","initEditor","_event","data","getData","MAX_CHAT_TEXT_SIZE","getChatTime","item","Date","toLocaleString","split","slice","MomentaryChatContentPart","replyChat","openEmojiPicker","setOpenEmojiPicker","useState","reply","className","onSelect","e","native","style","width","type","onClick","dangerouslySetInnerHTML","__html","DOMPurify","ADD_ATTR","map","count","MomentaryChatContent","chatList","chatListRef","useRef","latestMessageId","useEffect","current","scrollTop","scrollHeight","ref","MomentaryChat","roomId","userId","uniqueId","containerRef","sendChat","uniqueChatId","roomState","getRoomState","chatType","extraDataListMap","chatListState","useSnapshot","filter","useCallback","chatItem","secureRandomId","now","unshift","pop","inReplyTo","forEach","replyMap","Map","set","entries","sort","useMomentaryChat","clearRef","canSend","setCanSend","textRef","setText","t","sendText","sendNotification","notificationRef","mesg","Notification","permission","close","requestPermission","useNotification","latestChatItem","RegExp","test","clear","disabled"],"sourceRoot":""}