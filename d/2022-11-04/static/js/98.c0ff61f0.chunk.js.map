{"version":3,"file":"static/js/98.c0ff61f0.chunk.js","mappings":"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","sources":["hooks/useMediaShare.ts","media/screen.ts","hooks/useNicknameMap.ts","components/MediaShare.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { useSnapshot } from \"valtio\";\n\nimport { getScreenStream } from \"../media/screen\";\nimport { getVideoStream } from \"../media/video\";\nimport { getRoomState } from \"../states/roomMap\";\n\nexport const useMediaShare = (\n  roomId: string,\n  userId: string,\n  mediaId: { video: string } | \"SCREEN\" | null,\n  close: () => void,\n  uniqueShareId?: string\n) => {\n  const videoType = `${uniqueShareId || \"mediaShare\"}Video`;\n  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);\n  const [videoStreamMap, setVideoStreamMap] = useState<{\n    [userId: string]: MediaStream | null;\n  }>({});\n\n  type CleanupFn = () => void;\n  const cleanupFns = useRef<CleanupFn[]>([]);\n  useEffect(() => {\n    const cleanup = () => {\n      cleanupFns.current.forEach((fn) => fn());\n    };\n    return cleanup;\n  }, []);\n\n  const onTrack = ([uid, track]: [string, MediaStreamTrack]) => {\n    if (track.readyState === \"ended\") return;\n    if (videoStreamMap[uid]?.getTracks().includes(track)) return;\n    setVideoStreamMap((prev) => ({\n      ...prev,\n      [uid]: new MediaStream([track]),\n    }));\n    const onended = () => {\n      setVideoStreamMap((prev) => ({\n        ...prev,\n        [uid]: null,\n      }));\n    };\n    track.addEventListener(\"ended\", onended);\n    cleanupFns.current.push(() => {\n      track.removeEventListener(\"ended\", onended);\n    });\n  };\n\n  const trackMap = useSnapshot(getRoomState(roomId, userId).trackMap);\n  Object.entries(trackMap[videoType] || {}).forEach(onTrack);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    roomState.addMediaType(videoType);\n    return () => {\n      roomState.removeMediaType(videoType);\n    };\n  }, [roomId, userId, videoType]);\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    let cleanup: (() => void) | null | false = null;\n    if (mediaId) {\n      (async () => {\n        let result: { stream: MediaStream; dispose: () => void };\n        if (mediaId === \"SCREEN\") {\n          const resultOrNull = await getScreenStream();\n          if (!resultOrNull) {\n            close();\n            return;\n          }\n          result = resultOrNull;\n        } else {\n          result = await getVideoStream(mediaId.video);\n        }\n        const [track] = result.stream.getVideoTracks();\n        roomState.addTrack(videoType, track);\n        setVideoStream(result.stream);\n        track.addEventListener(\"ended\", () => {\n          if (cleanup) cleanup();\n          cleanup = null;\n        });\n        const dispose = () => {\n          roomState.removeTrack(videoType);\n          result.dispose();\n          setVideoStream(null);\n          close();\n        };\n        if (cleanup === false) {\n          dispose();\n        } else {\n          cleanup = dispose;\n        }\n      })();\n    }\n    return () => {\n      if (cleanup) cleanup();\n      cleanup = false;\n    };\n  }, [roomId, userId, videoType, mediaId, close]);\n\n  return { videoStream, videoStreamMap };\n};\n","export const getScreenStream = async () => {\n  try {\n    const constraints = { video: true };\n    const stream = (await (navigator.mediaDevices as any).getDisplayMedia(\n      constraints\n    )) as MediaStream;\n    const [track] = stream.getVideoTracks();\n    const dispose = () => {\n      track.stop();\n    };\n    return {\n      stream,\n      dispose,\n    };\n  } catch (e) {\n    return null;\n  }\n};\n","import { useEffect, useState } from \"react\";\nimport { subscribe } from \"valtio\";\n\nimport { isObject } from \"../utils/types\";\nimport { getRoomState } from \"../states/roomMap\";\n\nconst hasInfoNickname = (x: unknown): x is { info: { nickname: string } } =>\n  isObject(x) &&\n  isObject((x as { info: unknown }).info) &&\n  typeof (x as { info: { nickname: unknown } }).info.nickname === \"string\";\n\ntype NicknameMap = {\n  [userId: string]: string;\n};\n\nexport const useNicknameMap = (roomId: string, userId: string) => {\n  const [nicknameMap, setNicknameMap] = useState<NicknameMap>({});\n\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    return subscribe(roomState.faceImages, () => {\n      setNicknameMap((prev) => {\n        const copied = { ...prev };\n        let changed = false;\n        Object.entries(roomState.faceImages).forEach(([uid, data]) => {\n          if (uid === userId) return;\n          if (!hasInfoNickname(data)) return;\n          if (!copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          } else if (data.info.nickname !== copied[uid]) {\n            copied[uid] = data.info.nickname;\n            changed = true;\n          }\n        });\n        if (changed) {\n          return copied;\n        }\n        return prev;\n      });\n    });\n  }, [roomId, userId]);\n\n  return nicknameMap;\n};\n","import { memo, useCallback, useState, useRef, useEffect } from \"react\";\n\nimport \"./MediaShare.css\";\nimport { useMediaShare } from \"../hooks/useMediaShare\";\nimport { useVideoDevices } from \"../hooks/useAvailableDevices\";\nimport { useNicknameMap } from \"../hooks/useNicknameMap\";\n\nconst Video = memo<{\n  nickname: string;\n  stream: MediaStream;\n}>(({ nickname, stream }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  useEffect(() => {\n    if (stream && videoRef.current) {\n      videoRef.current.srcObject = stream;\n    }\n  }, [stream]);\n  return (\n    <div className=\"MediaShare-card\">\n      <video className=\"MediaShare-video\" ref={videoRef} autoPlay muted />\n      <div className=\"MediaShare-nickname\">{nickname}</div>\n    </div>\n  );\n});\n\nexport const MediaShare = memo<{\n  roomId: string;\n  userId: string;\n  nickname: string;\n  uniqueId?: string;\n}>(({ roomId, userId, nickname, uniqueId }) => {\n  const videoDevices = useVideoDevices();\n  const [videoDeviceId, setVideoDeviceId] = useState<string>(\"\");\n  const [mediaId, setMediaId] = useState<{ video: string } | \"SCREEN\" | null>(\n    null\n  );\n  const close = useCallback(() => {\n    setMediaId(null);\n  }, []);\n  const { videoStream, videoStreamMap } = useMediaShare(\n    roomId,\n    userId,\n    mediaId,\n    close,\n    uniqueId\n  );\n  const nicknameMap = useNicknameMap(roomId, userId);\n  const [displayMode, setDisplayMode] = useState<\"grid\" | \"vertical\">(\"grid\");\n  const numOfVideos =\n    (videoStream ? 1 : 0) +\n    Object.values(videoStreamMap).filter((x) => x).length;\n  const sqrtNumOfVideos = Math.ceil(Math.sqrt(numOfVideos));\n  const gridRows = Math.ceil(numOfVideos / sqrtNumOfVideos);\n  const displayStyle =\n    displayMode === \"grid\"\n      ? {\n          gridTemplateColumns: `repeat(${sqrtNumOfVideos}, 1fr)`,\n          gridTemplateRows: `repeat(${gridRows}, ${100 / gridRows}%)`,\n        }\n      : {\n          gridTemplateRows: Array(numOfVideos).fill(\"100%\").join(\" \"),\n        };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [fullscreenMode, setFullscreenMode] = useState(false);\n  const enterFullscreen = async () => {\n    if (containerRef.current) {\n      try {\n        await containerRef.current.requestFullscreen();\n        setFullscreenMode(true);\n        containerRef.current.onfullscreenchange = () => {\n          setFullscreenMode(\n            document.fullscreenElement === containerRef.current\n          );\n        };\n      } catch (e) {\n        // ignored\n      }\n    }\n  };\n  const exitFullscreen = async () => {\n    try {\n      document.exitFullscreen();\n      setFullscreenMode(false);\n    } catch (e) {\n      // ignored\n    }\n  };\n\n  return (\n    <div className=\"MediaShare-container\" ref={containerRef}>\n      <div className=\"MediaShare-toolbar\">\n        {!fullscreenMode && (\n          <button type=\"button\" onClick={enterFullscreen}>\n            Enter Fullscreen\n          </button>\n        )}\n        {fullscreenMode && (\n          <button type=\"button\" onClick={exitFullscreen}>\n            Exit Fullscreen\n          </button>\n        )}\n        <select\n          value={displayMode}\n          onChange={(e) => setDisplayMode(e.target.value as typeof displayMode)}\n        >\n          <option value=\"grid\">Display in Grid</option>\n          <option value=\"vertical\">Display Vertically</option>\n        </select>\n        {mediaId !== null && (\n          <button type=\"button\" onClick={close}>\n            Stop sharing\n          </button>\n        )}\n        {mediaId === null && (\n          <button type=\"button\" onClick={() => setMediaId(\"SCREEN\")}>\n            Start Screen Share\n          </button>\n        )}\n        {mediaId === null && (\n          <>\n            <select\n              value={videoDeviceId}\n              onChange={(e) => setVideoDeviceId(e.target.value)}\n            >\n              <option value=\"\" disabled>\n                Select Camera to Share\n              </option>\n              {videoDevices.map((videoDevice) => (\n                <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n                  {videoDevice.label}\n                </option>\n              ))}\n            </select>\n            {videoDeviceId && (\n              <button\n                type=\"button\"\n                onClick={() => setMediaId({ video: videoDeviceId })}\n              >\n                Start Video Share\n              </button>\n            )}\n          </>\n        )}\n      </div>\n      <div className=\"MediaShare-body\" style={displayStyle}>\n        {videoStream && <Video nickname={nickname} stream={videoStream} />}\n        {Object.keys(videoStreamMap).map((mediaUserId) => {\n          const stream = videoStreamMap[mediaUserId];\n          if (!stream) return null;\n          return (\n            <Video\n              key={mediaUserId}\n              nickname={nicknameMap[mediaUserId] || \"No Name\"}\n              stream={stream}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default MediaShare;\n"],"names":["useMediaShare","roomId","userId","mediaId","close","uniqueShareId","videoType","videoStream","setVideoStream","useState","videoStreamMap","setVideoStreamMap","cleanupFns","useRef","useEffect","current","forEach","fn","trackMap","useSnapshot","getRoomState","Object","entries","uid","track","readyState","getTracks","includes","prev","MediaStream","onended","addEventListener","push","removeEventListener","roomState","addMediaType","removeMediaType","cleanup","result","resultOrNull","async","constraints","video","stream","navigator","mediaDevices","getDisplayMedia","getVideoTracks","dispose","stop","e","getScreenStream","getVideoStream","addTrack","removeTrack","useNicknameMap","nicknameMap","setNicknameMap","subscribe","faceImages","copied","changed","data","x","isObject","info","nickname","Video","memo","videoRef","srcObject","className","ref","autoPlay","muted","MediaShare","uniqueId","videoDevices","useVideoDevices","videoDeviceId","setVideoDeviceId","setMediaId","useCallback","displayMode","setDisplayMode","numOfVideos","values","filter","length","sqrtNumOfVideos","Math","ceil","sqrt","gridRows","displayStyle","gridTemplateColumns","gridTemplateRows","Array","fill","join","containerRef","fullscreenMode","setFullscreenMode","type","onClick","requestFullscreen","onfullscreenchange","document","fullscreenElement","exitFullscreen","value","onChange","target","disabled","map","videoDevice","deviceId","label","style","keys","mediaUserId"],"sourceRoot":""}