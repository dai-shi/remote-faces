{"version":3,"sources":["hooks/useGoBoard.ts","components/GoBoard.tsx"],"names":["useGoBoard","roomId","userId","syncDown","uniqueBoardId","boardType","useEffect","list","getRoomState","ydoc","getArray","listener","toArray","flatMap","item","data","JSON","parse","x","obj","size","grid","length","some","c","Color","B","W","E","capCount","black","white","turn","e","isPositionData","observe","unobserve","syncUp","useCallback","positions","push","slice","map","stringify","delete","createPosition","positionData","position","Position","GoBoard","React","memo","uniqueId","actionsRef","useRef","useMemo","cb","current","setTimeout","useState","color","setColor","setCapCount","divRef","div","actions","element","game","Game","board","CanvasBoard","theme","themes","modernTheme","width","clientWidth","height","clientHeight","fieldObjects","markerObject","updateFieldObjects","filter","getStone","y","type","removeObject","get","FieldObject","addObject","BoardMarkupObject","hoverObject","clearHoverObject","on","_event","pos","isValid","setPosition","play","positionStack","pushPosition","popPosition","pass","undo","resize","setDimensions","createGoBoard","observer","MutationObserver","region","parentNode","attributes","attributeFilter","disconnect","className","onClick","ref"],"mappings":"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","file":"static/js/13.3c35db62.chunk.js","sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport { Color } from \"wgo\";\n\nimport { getRoomState } from \"../states/roomMap\";\n\nexport type PositionData = {\n  size: number;\n  grid: Color[];\n  capCount: { black: number; white: number };\n  turn: Color.B | Color.W;\n};\n\nconst isPositionData = (x: unknown): x is PositionData => {\n  try {\n    const obj = x as PositionData;\n    if (typeof obj.size !== \"number\") return false;\n    if (obj.grid.length !== obj.size * obj.size) return false;\n    if (obj.grid.some((c) => c !== Color.B && c !== Color.W && c !== Color.E)) {\n      return false;\n    }\n    if (\n      typeof obj.capCount.black !== \"number\" ||\n      typeof obj.capCount.white !== \"number\"\n    ) {\n      return false;\n    }\n    if (obj.turn !== Color.B && obj.turn !== Color.W) return false;\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport type Action =\n  | {\n      type: \"play\";\n      position: PositionData;\n    }\n  | {\n      type: \"pass\";\n      position: PositionData;\n    }\n  | {\n      type: \"undo\";\n    };\n\nexport const useGoBoard = (\n  roomId: string,\n  userId: string,\n  syncDown: (positions: PositionData[]) => void,\n  uniqueBoardId?: string\n) => {\n  const boardType = `${uniqueBoardId || \"go\"}Board`;\n  useEffect(() => {\n    const roomState = getRoomState(roomId, userId);\n    const list = roomState.ydoc.getArray(boardType);\n    const listener = () => {\n      syncDown(\n        list.toArray().flatMap((item) => {\n          try {\n            const data = JSON.parse(item as string);\n            if (isPositionData(data)) {\n              return [data];\n            }\n          } catch (e) {\n            // ignored\n          }\n          return [];\n        })\n      );\n    };\n    list.observe(listener);\n    listener();\n    return () => {\n      list.unobserve(listener);\n    };\n  }, [roomId, userId, syncDown, boardType]);\n\n  const syncUp = useCallback(\n    (positions: PositionData[]) => {\n      const roomState = getRoomState(roomId, userId);\n      const list = roomState.ydoc.getArray(boardType);\n      if (list.length < positions.length) {\n        list.push(positions.slice(list.length).map((x) => JSON.stringify(x)));\n      } else if (list.length > positions.length) {\n        list.delete(positions.length, list.length - positions.length);\n      }\n    },\n    [roomId, userId, boardType]\n  );\n\n  return { syncUp };\n};\n","import React, { useMemo, useEffect, useRef, useState } from \"react\";\nimport {\n  Game,\n  Color,\n  CanvasBoard,\n  themes,\n  FieldObject,\n  BoardMarkupObject,\n  Position,\n} from \"wgo\";\n\nimport \"./GoBoard.css\";\nimport { useGoBoard, PositionData } from \"../hooks/useGoBoard\";\n\nconst createPosition = (positionData: PositionData) => {\n  const position = new Position(positionData.size);\n  position.grid = positionData.grid;\n  position.capCount = positionData.capCount;\n  position.turn = positionData.turn;\n  return position;\n};\n\nconst createGoBoard = (\n  element: HTMLDivElement,\n  setColor: (c: \"black\" | \"white\") => void,\n  setCapCount: (capCount: { black: number; white: number }) => void,\n  syncUp: (positions: PositionData[]) => void\n) => {\n  const game = new Game(6);\n  const board = new CanvasBoard(element, {\n    theme: themes.modernTheme,\n    width: element.clientWidth,\n    height: element.clientHeight,\n    size: 6,\n  });\n  let fieldObjects: FieldObject[] = [];\n  let markerObject: BoardMarkupObject | null | false = null;\n  const updateFieldObjects = () => {\n    fieldObjects = fieldObjects.filter((obj) => {\n      if (\n        game.getStone(obj.x, obj.y) !== (obj.type === \"B\" ? Color.B : Color.W)\n      ) {\n        board.removeObject(obj);\n        return false;\n      }\n      return true;\n    });\n    if (markerObject) {\n      board.removeObject(markerObject);\n    }\n    markerObject = null;\n    for (let x = 0; x < game.position.size; x += 1) {\n      for (let y = 0; y < game.position.size; y += 1) {\n        const c = game.position.get(x, y);\n        if (\n          c &&\n          !fieldObjects.some(\n            (obj) =>\n              obj.x === x &&\n              obj.y === y &&\n              c === (obj.type === \"B\" ? Color.B : Color.W)\n          )\n        ) {\n          const obj = new FieldObject(c === Color.B ? \"B\" : \"W\", x, y);\n          board.addObject(obj);\n          fieldObjects.push(obj);\n          if (markerObject === null) {\n            markerObject = new BoardMarkupObject(\"SQ\", x, y, c);\n            board.addObject(markerObject);\n          } else if (markerObject) {\n            // we don't know what is the last move\n            board.removeObject(markerObject);\n            markerObject = false; // don't put marker this time\n          }\n        }\n      }\n    }\n  };\n  let hoverObject: FieldObject | null = null;\n  const clearHoverObject = () => {\n    if (hoverObject) {\n      board.removeObject(hoverObject);\n      hoverObject = null;\n    }\n  };\n  board.on(\"mousemove\", (_event, pos) => {\n    const isValid = pos && game.isValid(pos.x, pos.y);\n    if (!isValid) {\n      clearHoverObject();\n      return;\n    }\n    if (!hoverObject) {\n      hoverObject = new FieldObject(game.turn === Color.B ? \"B\" : \"W\");\n    } else if (hoverObject.x === pos.x && hoverObject.y === pos.y) {\n      return;\n    } else {\n      board.removeObject(hoverObject);\n    }\n    hoverObject.setPosition(pos.x, pos.y);\n    board.addObject(hoverObject);\n  });\n  board.on(\"mouseout\", clearHoverObject);\n  board.on(\"click\", (_event, { x, y }) => {\n    const isValid = game.isValid(x, y);\n    if (isValid) {\n      clearHoverObject();\n      game.play(x, y);\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      syncUp(game.positionStack);\n    }\n  });\n  setColor(game.turn === Color.B ? \"black\" : \"white\");\n  const syncDown = (positions: PositionData[]) => {\n    if (game.positionStack.length === positions.length) return;\n    while (game.positionStack.length < positions.length) {\n      game.pushPosition(createPosition(positions[game.positionStack.length]));\n    }\n    while (game.positionStack.length > positions.length) {\n      game.popPosition();\n    }\n    updateFieldObjects();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    setCapCount(game.position.capCount);\n    clearHoverObject();\n  };\n  const pass = () => {\n    game.pass();\n    setColor(game.turn === Color.B ? \"black\" : \"white\");\n    syncUp(game.positionStack);\n  };\n  const undo = () => {\n    if (game.popPosition()) {\n      updateFieldObjects();\n      setColor(game.turn === Color.B ? \"black\" : \"white\");\n      setCapCount(game.position.capCount);\n      syncUp(game.positionStack);\n    }\n  };\n  const resize = () => {\n    board.setDimensions(element.clientWidth, element.clientHeight);\n  };\n  return { syncDown, pass, undo, resize };\n};\n\nexport const GoBoard = React.memo<{\n  roomId: string;\n  userId: string;\n  uniqueId?: string;\n}>(({ roomId, userId, uniqueId }) => {\n  const actionsRef = useRef<{\n    syncDown: (positions: PositionData[]) => void;\n    pass: () => void;\n    undo: () => void;\n    resize: () => void;\n  }>();\n  const syncDown = useMemo(() => {\n    const cb = (positions: PositionData[]) => {\n      if (!positions.length) return;\n      if (actionsRef.current) {\n        actionsRef.current.syncDown(positions);\n      } else {\n        setTimeout(() => {\n          cb(positions);\n        }, 1000);\n      }\n    };\n    return cb;\n  }, []);\n  const { syncUp } = useGoBoard(roomId, userId, syncDown, uniqueId);\n  const [color, setColor] = useState<\"black\" | \"white\">(\"black\");\n  const [capCount, setCapCount] = useState<{\n    black: number;\n    white: number;\n  }>({ black: 0, white: 0 });\n  const divRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (divRef.current) {\n      const div = divRef.current;\n      const actions = createGoBoard(div, setColor, setCapCount, syncUp);\n      actionsRef.current = actions;\n      const observer = new MutationObserver(actions.resize);\n      const region = div.parentNode?.parentNode;\n      if (region) {\n        observer.observe(region, {\n          attributes: true,\n          attributeFilter: [\"style\"],\n        });\n      }\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return undefined;\n  }, [syncUp]);\n  const pass = () => {\n    if (actionsRef.current) {\n      actionsRef.current.pass();\n    }\n  };\n  const undo = () => {\n    if (actionsRef.current) {\n      actionsRef.current.undo();\n    }\n  };\n  return (\n    <div className=\"GoBoard-container\">\n      <div className=\"GoBoard-toolbar\">\n        Next Turn: {color === \"black\" ? \"Black\" : \"White\"}\n        <button type=\"button\" onClick={pass}>\n          Pass\n        </button>\n        <button type=\"button\" onClick={undo}>\n          Undo\n        </button>\n        <div>\n          Capture Count: Black {capCount.black}, White {capCount.white}\n        </div>\n      </div>\n      <div className=\"GoBoard-canvas\" ref={divRef} />\n    </div>\n  );\n});\n\nexport default GoBoard;\n"],"sourceRoot":""}